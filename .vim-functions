function! MyStatusLine()
	let s = '%{winnr()} %n-%<%f %h%m%r%=%-14.(%l,%c%V%) %P'
	"op volgorde van verschijning:
	"%{winnr()}	retourneert het windownummer van het desbetreffende window
	"\â–«		voegt een spatie in
	"%n		buffer nummer
	"-		voegt een "-" in
	"%<		geeft aan dat op deze positie tekst afgekapt kan worden als dat nodig zou zijn
	"%f		directory naar bestand van het buffer dat weergegeven wordt in het window, as typed or relative to current directory
	"%h		help buffer flag "[help]"
	"%m		modified flag
	"			"[-]"	=> modifiable is off
	"			"[+]"	=> buffer is modified
	"			""	=> modifiable is on, buffer is not modified
	"%r		read-only flag "[RO]"
	"%=		seperation point between left and right aligned items
	"-		left justify the item when needed to be justified
	"14.		{minwid}.{maxwid} minwid (minimal width) =14 maxwid (maximum width) is omitted
	"(...%)		start and end of item group can be used for setting the width and alignment of a section
	"%l		line number
	"%c		column number
	"%V		virtual column number, not shown when the same as %c
	"%P		percentage through file shown as described in "ruler"
	return s
	endfunction

	"uncomment next line to set custum statusline
set statusline=%!MyStatusLine()
	"statusline bezit de informatie over hoe en wat de statusline afbeeld. Iedere window heeft een statusline.
	"statusline, stl

function! MyTabLine()
	let s = ''
	for i in range(tabpagenr('$'))
	" select the highlighting from the right highlighting-group
if i + 1 == tabpagenr()
	let s .= '%#TabLineSel#'
	else
	let s .= '%#TabLine#'
	endif

	" set the tab page number (for mouse clicks)
	"let s .= '%' . (i + 1) . 'T'

let s .= (i + 1)

" the label is made by MyTabLabel()
let s .= ' %{MyTabLabel(' . (i + 1) . ')} '
endfor

" after the last tab fill with TabLineFill and reset tab page nr
let s .= '%#TabLineFill#'

" right-align the label to close the current tab page
"if tabpagenr('$') > 1
"let s .= '%=%#TabLine#%999Xclose'
"endif

return s
endfunction

	function! MyTabLabel(n)
	let buflist = tabpagebuflist(a:n)
	let winnr = tabpagewinnr(a:n)
return bufname(buflist[winnr - 1])
	endfunction

	" uncomment net line to set custum tabline
	"set tabline=%!MyTabLine()

	" Standard configuration file found in /usr/share/vim/vimfiles/vimrc

	" All system-wide defaults are set in $VIMRUNTIME/debian.vim (usually just
	" /usr/share/vim/vimcurrent/debian.vim) and sourced by the call to :runtime
	" you can find below.  If you wish to change any of those settings, you should
	" do it in this file (/etc/vim/vimrc), since debian.vim will be overwritten
	" everytime an upgrade of the vim packages is performed.  It is recommended to
	" make changes after sourcing debian.vim since it alters the value of the
	" 'compatible' option.

	" This line should not be removed as it ensures that various options are
	" properly set to work with the Vim-related packages available in Debian.
	"runtime! debian.vim
	" bovenstaande lijn is "ge-comment", omdat het "set showcmd" ongedaan maakte

	" Uncomment the next line to make Vim more Vi-compatible
	" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
	" options, so any other options should be set AFTER setting 'compatible'.
	"set compatible

	" Vim5 and later versions support syntax highlighting. Uncommenting the next
	" line enables syntax highlighting by default.
	if has("syntax")
	syntax on
	endif

	" If using a dark background within the editing area and syntax highlighting
	" turn on this option as well
	"set background=dark

	" Uncomment the following to have Vim jump to the last position when
	" reopening a file
	"if has("autocmd")
	"  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
	"endif

	" Uncomment the following to have Vim load indentation rules and plugins
	" according to the detected filetype.
	"if has("autocmd")
	"  filetype plugin indent on
	"endif

	" The following are commented out as they cause vim to behave a lot
	" differently from regular Vi. They are highly recommended though.
	"set showcmd		" Show (partial) command in status line.
	"set showmatch		" Show matching brackets.
	"set ignorecase		" Do case insensitive matching
	"set smartcase		" Do smart case matching
	"set incsearch		" Incremental search
	"set autowrite		" Automatically save before commands like :next and :make
	"set hidden             " Hide buffers when they are abandoned
	"set mouse=a		" Enable mouse usage (all modes)

	" Source a global configuration file if available
"	if filereadable("/etc/vim/vimrc.local")
"	source /etc/vim/vimrc.local
"	endif

function! Format()
" We starten met het zoeken van een lege regel die opgevolgd wordt door een regel met:
"	set
"of
"	"set
"of
"	" set
	/^ *$\n\(" \=\)\=set/
	+2
	let line = getline('.')
	while !(line =~? "^ *$")
		if (line =~? '^\"\S')
			s/^"\(\S\)/" \1/
		endif
		+1
		let line = getline('.')
	endwhile
	-1
endfunction

"	let line= getline('.')
"	if (line =~? "\%^.*")
"		break
"	else
"		/^ *$\n\(" \=\)\=set/
"	endif


function SmoothScroll(up)
	if (a:up == 1)
		let scrollaction=""
		let scrollamount=&scroll
	elseif (a:up == -1)
		let scrollaction=""
		let scrollamount=&scroll
	endif
	exec "normal " . scrollaction
	redraw
	let counter=1
	while counter<l:scrollamount
		let counter+=1
		sleep 5m
		redraw
		exec "normal " . scrollaction
	endwhile
endfunction
" remmappings van <C-U> en <C-D> zijn te vinden in "~/.vimrc"
